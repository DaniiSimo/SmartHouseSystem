from typing import Any


class Enum_:
    """ Класс, обрабатывающий строковое представление режима """

    __wash_mashine_keywords = {
        "эко": {"температура": 30, "обороты": 800, "давление": "низкое", "время": '1:30:00'},
        "шерсть": {"температура": 40, "обороты": 600, "давление": "среднее", "время": '1:30:00'},
        "шелк": {"температура": 30, "обороты": 400, "давление": "низкое", "время": '1:00:00'},
        "быстрая стирка": {"температура": 50, "обороты": 600, "давление": "высокое", "время": '00:40:00'},
        "интенсивная": {"температура": 60, "обороты": 1200, "давление": "высокое", "время": '2:00:00'},
        "ручная стирка": {"температура": 30, "обороты": 400, "давление": "низкое", "время": '00:30:00'},
        "слив": {"температура": 0, "обороты": 0, "давление": "нет", "время": '00:10:00'}
    }

    def convert_enum_value(self, text: str) -> tuple | None:
        """
        Извлекает из текста значение перечисления и возвращает lambda выражение, которое возвращает 3 параметра режима

        Args:
            text (str): Необработанный текстовый запрос

        Returns:
            lambda: Лямбда-функция, которая возвращает три значения параметров
        """
        text = text.lower()
        for mode in Enum_.__wash_mashine_keywords.keys():
            if mode in text:
                mode_values = Enum_.__wash_mashine_keywords[mode]

                return lambda: (
                mode_values["температура"], mode_values["обороты"], mode_values["давление"], mode_values['время'])

        return None
